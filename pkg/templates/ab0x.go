// Code generated by fileb0x at "2017-10-27 12:16:26.382947919 +0200 CEST m=+0.002729885" from config file "ab0x.yaml" DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"io"
	"log"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileLoginTmpl is "login.tmpl"
var FileLoginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x3d\x6f\xdb\x30\x10\x9d\xe5\x5f\xc1\x72\x0e\x23\x04\x59\x3a\x90\x06\x8a\x34\x43\xa6\x06\x6d\x02\xb4\x23\x4d\x9e\x2c\xd6\x14\x4f\x25\x4f\x4a\xdc\xc0\xff\xbd\xd0\xa7\x65\x27\xc8\xd2\x02\x9d\x78\x5f\x7c\xf7\xf4\x8e\x3e\xcb\x0f\x9f\xbf\xdc\x3c\xfc\xb8\xbf\x65\x25\x55\x7e\xbd\x5a\xc9\xee\x64\x5e\x87\xad\xe2\x10\xf8\x7a\x95\xc9\x12\xb4\x5d\xaf\xb2\x4c\x56\x40\x9a\x99\x52\xc7\x04\xa4\x78\x43\x85\xf8\xc8\x17\x09\x0c\x04\x81\x14\x7f\x72\x96\x4a\x65\xa1\x75\x06\x44\xef\x5c\x30\x17\x1c\x39\xed\x45\x32\xda\x83\xba\xba\x60\xa9\x8c\x2e\xec\x04\xa1\x28\x1c\xa9\x80\x9c\x05\x5d\x81\xe2\xad\x83\xa7\x1a\x23\xbd\x05\x7c\x77\xab\xc0\x6e\x81\xb3\x92\xa8\x16\xf0\xab\x71\xad\xe2\xdf\xc5\xe3\x27\x71\x83\x55\xad\xc9\x6d\x3c\xf0\xf5\xea\xf5\xc5\x09\xdc\x42\x32\xd1\xd5\xe4\x30\xbc\x85\x3f\x95\xe9\x86\x4a\x8c\x23\x12\x39\xf2\xb0\x7e\x79\x61\x97\x0f\x9d\xc5\x0e\x07\x99\x0f\xb1\x3e\xed\x5d\xd8\xb1\x08\x5e\x71\x67\x30\x70\x56\x46\x28\x14\xef\xca\xbf\x22\x12\x3b\x1c\x72\x9d\x12\x50\xca\x0b\xdd\x76\x15\x97\xce\xe0\xd0\xfb\x78\x33\xd1\xde\x43\x2a\x01\xe8\x9d\xfb\x75\xc4\xe7\xfd\xa5\x49\x89\xb3\xbc\x9b\x4a\x3e\x8e\x45\x6e\xd0\xee\x7b\x40\xeb\x5a\x66\xbc\x4e\x49\xf1\x66\x27\x0a\x0f\xcf\x6c\x3c\x85\x81\x40\x10\xfb\xbe\xe7\x75\x46\x47\xcb\xc6\x53\x58\x28\x74\xe3\x69\xf6\x4b\x6c\x21\xce\x5e\xd7\x69\xc0\xc8\x64\x79\xbd\xc0\xe8\xa8\xb8\xb0\x15\xde\x05\x18\x0b\x32\x99\x6a\x1d\x46\x3b\x5b\xca\x37\xa6\xf3\x63\x5e\xe6\xe5\x75\xaf\xe6\x2b\x72\xda\x43\x24\x61\x75\xd8\x42\xe4\x6c\x0a\x4c\x1d\xf4\xab\x4a\xe3\x31\x41\x5f\xd8\x5b\x6b\x99\xeb\x11\x38\x93\xf5\x44\xe6\x2e\x18\x8c\x11\x0c\xb1\x26\x41\xec\x46\xce\x30\xb2\x5a\xa7\xf4\x84\xd1\x4e\xf4\xea\x89\x9b\x75\xed\x44\xae\xc0\x58\x2d\x25\xc6\x58\x89\x44\xda\xec\xc0\x72\x56\x01\x95\x68\x15\xaf\x31\x11\x67\xda\x74\xaf\xec\x6c\x92\x0d\x95\xb3\x3c\xa7\x1f\x5a\xe9\xb8\x75\x61\x4a\x66\xd2\xeb\x0d\xf8\xf3\x56\x7d\x90\xb3\x02\xa3\xe2\x13\xf5\xf9\x4a\xf6\x38\x46\x26\x88\xbc\x2f\x9f\x11\xcf\x5e\x47\x87\xd7\x3d\xfc\x88\x3e\x1d\x31\xa4\x0b\x75\x43\x8b\xba\xde\xe7\xcc\xd9\x45\x47\x46\xfb\x1a\x16\xfe\x74\x39\xd3\x0d\x61\x81\xa6\x49\xfd\x4f\x68\x30\x4f\xb3\x46\xd7\x8e\xb4\x77\xbf\x41\x71\x2c\x8a\xb3\xe4\x30\x95\x21\x33\xf3\x1e\xf4\xcf\xce\x67\xf1\xd7\x02\x4e\xf3\x3e\x7e\xfc\xfd\xc9\x0b\xf8\xb7\x02\x0e\x92\xcd\x3d\x7b\x41\x67\xef\x3f\x49\xb4\x69\x88\x30\x2c\x0a\xc6\xc0\x6c\x89\x3a\xba\x4a\xc7\x7d\x17\xe9\xf7\xb8\xb8\x12\x57\x6c\x46\x12\xa9\xd2\xde\x8b\x0d\x12\x61\x75\x94\xe0\x9b\xdb\x06\xe6\xc2\x4c\x6e\xc0\x3a\xe5\x37\x98\x9d\x86\xc3\x4a\x9a\xa2\x47\xfa\x72\xd8\xd4\x2c\x45\xf3\xce\x3a\xfc\x99\xf8\x5a\xe6\x43\x69\xbf\x14\x87\x65\x28\xf3\xf1\xdf\xec\x4f\x00\x00\x00\xff\xff\x43\x77\x68\xf1\xdf\x06\x00\x00")

func init() {
	if CTX.Err() != nil {
		log.Fatal(CTX.Err())
	}

	var err error

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileLoginTmpl)
	r, err = gzip.NewReader(rb)
	if err != nil {
		log.Fatal(err)
	}

	err = r.Close()
	if err != nil {
		log.Fatal(err)
	}

	f, err = FS.OpenFile(CTX, "login.tmpl", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		log.Fatal(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		log.Fatal(err)
	}

	err = f.Close()
	if err != nil {
		log.Fatal(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
